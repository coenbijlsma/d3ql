/*
 * generated by Xtext 2.9.2
 */
grammar InternalD3ql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.coenbijlsma.languages.d3ql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.coenbijlsma.languages.d3ql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.coenbijlsma.languages.d3ql.services.D3qlGrammarAccess;

}

@parser::members {

 	private D3qlGrammarAccess grammarAccess;

    public InternalD3qlParser(TokenStream input, D3qlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Query";
   	}

   	@Override
   	protected D3qlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getFromStatementFromStatementParserRuleCall_0_0());
				}
				lv_fromStatement_0_0=ruleFromStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"fromStatement",
						lv_fromStatement_0_0,
						"nl.coenbijlsma.languages.d3ql.D3ql.FromStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getSelectStatementSelectStatementParserRuleCall_1_0());
				}
				lv_selectStatement_1_0=ruleSelectStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"selectStatement",
						lv_selectStatement_1_0,
						"nl.coenbijlsma.languages.d3ql.D3ql.SelectStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFromStatement
entryRuleFromStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromStatementRule()); }
	iv_ruleFromStatement=ruleFromStatement
	{ $current=$iv_ruleFromStatement.current; }
	EOF;

// Rule FromStatement
ruleFromStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='from'
		{
			newLeafNode(otherlv_0, grammarAccess.getFromStatementAccess().getFromKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_1_0());
				}
				lv_aggregates_1_0=ruleAggregateRoot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFromStatementRule());
					}
					add(
						$current,
						"aggregates",
						lv_aggregates_1_0,
						"nl.coenbijlsma.languages.d3ql.D3ql.AggregateRoot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getFromStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_2_1_0());
					}
					lv_aggregates_3_0=ruleAggregateRoot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFromStatementRule());
						}
						add(
							$current,
							"aggregates",
							lv_aggregates_3_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.AggregateRoot");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAggregateRoot
entryRuleAggregateRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregateRootRule()); }
	iv_ruleAggregateRoot=ruleAggregateRoot
	{ $current=$iv_ruleAggregateRoot.current; }
	EOF;

// Rule AggregateRoot
ruleAggregateRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAggregateRootAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAggregateRootRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getAggregateRootAccess().getAsKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAggregateRootAccess().getAliasAliasParserRuleCall_1_1_0());
					}
					lv_alias_2_0=ruleAlias
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAggregateRootRule());
						}
						set(
							$current,
							"alias",
							lv_alias_2_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.Alias");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAlias
entryRuleAlias returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliasRule()); }
	iv_ruleAlias=ruleAlias
	{ $current=$iv_ruleAlias.current; }
	EOF;

// Rule Alias
ruleAlias returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAliasRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStatementAccess().getSelectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleSelectExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"nl.coenbijlsma.languages.d3ql.D3ql.SelectExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_2_1_0());
					}
					lv_expressions_3_0=ruleSelectExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.SelectExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSelectExpression
entryRuleSelectExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectExpressionRule()); }
	iv_ruleSelectExpression=ruleSelectExpression
	{ $current=$iv_ruleSelectExpression.current; }
	EOF;

// Rule SelectExpression
ruleSelectExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectExpressionAccess().getExpressionPathExpressionParserRuleCall_0_0_0());
					}
					lv_expression_0_1=rulePathExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_0_1,
							"nl.coenbijlsma.languages.d3ql.D3ql.PathExpression");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSelectExpressionAccess().getExpressionFunctionCallParserRuleCall_0_0_1());
					}
					lv_expression_0_2=ruleFunctionCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_0_2,
							"nl.coenbijlsma.languages.d3ql.D3ql.FunctionCall");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSelectExpressionAccess().getExpressionLiteralParserRuleCall_0_0_2());
					}
					lv_expression_0_3=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_0_3,
							"nl.coenbijlsma.languages.d3ql.D3ql.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectExpressionAccess().getAsKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectExpressionAccess().getAliasAliasParserRuleCall_1_1_0());
					}
					lv_alias_2_0=ruleAlias
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
						}
						set(
							$current,
							"alias",
							lv_alias_2_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.Alias");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePathExpression
entryRulePathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathExpressionRule()); }
	iv_rulePathExpression=rulePathExpression
	{ $current=$iv_rulePathExpression.current; }
	EOF;

// Rule PathExpression
rulePathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPathExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPathExpressionAccess().getHeadNamedCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_1_0_0());
						}
						lv_tail_2_0=rulePathElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPathExpressionRule());
							}
							add(
								$current,
								"tail",
								lv_tail_2_0,
								"nl.coenbijlsma.languages.d3ql.D3ql.PathElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3='.'
				{
					newLeafNode(otherlv_3, grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_1_1());
				}
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_2_0());
					}
					lv_tail_4_0=rulePathElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathExpressionRule());
						}
						add(
							$current,
							"tail",
							lv_tail_4_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.PathElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePathElement
entryRulePathElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathElementRule()); }
	iv_rulePathElement=rulePathElement
	{ $current=$iv_rulePathElement.current; }
	EOF;

// Rule PathElement
rulePathElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPathElementAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPathElementRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_function_0_0=RULE_ID
				{
					newLeafNode(lv_function_0_0, grammarAccess.getFunctionCallAccess().getFunctionIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"function",
						lv_function_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_2_0());
				}
				lv_arguments_2_0=ruleFunctionArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_2_0,
						"nl.coenbijlsma.languages.d3ql.D3ql.FunctionArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_3_1_0());
					}
					lv_arguments_4_0=ruleFunctionArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"nl.coenbijlsma.languages.d3ql.D3ql.FunctionArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctionArgument
entryRuleFunctionArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionArgumentRule()); }
	iv_ruleFunctionArgument=ruleFunctionArgument
	{ $current=$iv_ruleFunctionArgument.current; }
	EOF;

// Rule FunctionArgument
ruleFunctionArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionArgumentAccess().getValuePathExpressionParserRuleCall_0_0());
				}
				lv_value_0_1=rulePathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionArgumentRule());
					}
					set(
						$current,
						"value",
						lv_value_0_1,
						"nl.coenbijlsma.languages.d3ql.D3ql.PathExpression");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getFunctionArgumentAccess().getValueLiteralParserRuleCall_0_1());
				}
				lv_value_0_2=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionArgumentRule());
					}
					set(
						$current,
						"value",
						lv_value_0_2,
						"nl.coenbijlsma.languages.d3ql.D3ql.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0());
		}
		this_IntegerLiteral_0=ruleIntegerLiteral
		{
			$current = $this_IntegerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current = $this_StringLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2());
		}
		this_BooleanLiteral_2=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	iv_ruleIntegerLiteral=ruleIntegerLiteral
	{ $current=$iv_ruleIntegerLiteral.current; }
	EOF;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='true'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='false'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
