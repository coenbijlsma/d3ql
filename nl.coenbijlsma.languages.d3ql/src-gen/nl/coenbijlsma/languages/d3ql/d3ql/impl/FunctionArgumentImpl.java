/**
 * generated by Xtext 2.9.2
 */
package nl.coenbijlsma.languages.d3ql.d3ql.impl;

import nl.coenbijlsma.languages.d3ql.d3ql.D3qlPackage;
import nl.coenbijlsma.languages.d3ql.d3ql.Expression;
import nl.coenbijlsma.languages.d3ql.d3ql.FunctionArgument;
import nl.coenbijlsma.languages.d3ql.d3ql.Named;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Argument</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.coenbijlsma.languages.d3ql.d3ql.impl.FunctionArgumentImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link nl.coenbijlsma.languages.d3ql.d3ql.impl.FunctionArgumentImpl#getFqn <em>Fqn</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionArgumentImpl extends MinimalEObjectImpl.Container implements FunctionArgument
{
  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected Named reference;

  /**
   * The cached value of the '{@link #getFqn() <em>Fqn</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFqn()
   * @generated
   * @ordered
   */
  protected Expression fqn;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionArgumentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return D3qlPackage.Literals.FUNCTION_ARGUMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Named getReference()
  {
    if (reference != null && reference.eIsProxy())
    {
      InternalEObject oldReference = (InternalEObject)reference;
      reference = (Named)eResolveProxy(oldReference);
      if (reference != oldReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, D3qlPackage.FUNCTION_ARGUMENT__REFERENCE, oldReference, reference));
      }
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Named basicGetReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReference(Named newReference)
  {
    Named oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, D3qlPackage.FUNCTION_ARGUMENT__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getFqn()
  {
    return fqn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFqn(Expression newFqn, NotificationChain msgs)
  {
    Expression oldFqn = fqn;
    fqn = newFqn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, D3qlPackage.FUNCTION_ARGUMENT__FQN, oldFqn, newFqn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFqn(Expression newFqn)
  {
    if (newFqn != fqn)
    {
      NotificationChain msgs = null;
      if (fqn != null)
        msgs = ((InternalEObject)fqn).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - D3qlPackage.FUNCTION_ARGUMENT__FQN, null, msgs);
      if (newFqn != null)
        msgs = ((InternalEObject)newFqn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - D3qlPackage.FUNCTION_ARGUMENT__FQN, null, msgs);
      msgs = basicSetFqn(newFqn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, D3qlPackage.FUNCTION_ARGUMENT__FQN, newFqn, newFqn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case D3qlPackage.FUNCTION_ARGUMENT__FQN:
        return basicSetFqn(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case D3qlPackage.FUNCTION_ARGUMENT__REFERENCE:
        if (resolve) return getReference();
        return basicGetReference();
      case D3qlPackage.FUNCTION_ARGUMENT__FQN:
        return getFqn();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case D3qlPackage.FUNCTION_ARGUMENT__REFERENCE:
        setReference((Named)newValue);
        return;
      case D3qlPackage.FUNCTION_ARGUMENT__FQN:
        setFqn((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case D3qlPackage.FUNCTION_ARGUMENT__REFERENCE:
        setReference((Named)null);
        return;
      case D3qlPackage.FUNCTION_ARGUMENT__FQN:
        setFqn((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case D3qlPackage.FUNCTION_ARGUMENT__REFERENCE:
        return reference != null;
      case D3qlPackage.FUNCTION_ARGUMENT__FQN:
        return fqn != null;
    }
    return super.eIsSet(featureID);
  }

} //FunctionArgumentImpl
