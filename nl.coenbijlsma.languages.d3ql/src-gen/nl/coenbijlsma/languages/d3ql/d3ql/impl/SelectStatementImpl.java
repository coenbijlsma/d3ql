/**
 * generated by Xtext 2.9.2
 */
package nl.coenbijlsma.languages.d3ql.d3ql.impl;

import java.util.Collection;

import nl.coenbijlsma.languages.d3ql.d3ql.D3qlPackage;
import nl.coenbijlsma.languages.d3ql.d3ql.SelectStatement;
import nl.coenbijlsma.languages.d3ql.d3ql.SelectionItem;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.coenbijlsma.languages.d3ql.d3ql.impl.SelectStatementImpl#getArterisk <em>Arterisk</em>}</li>
 *   <li>{@link nl.coenbijlsma.languages.d3ql.d3ql.impl.SelectStatementImpl#getSelections <em>Selections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectStatementImpl extends MinimalEObjectImpl.Container implements SelectStatement
{
  /**
   * The default value of the '{@link #getArterisk() <em>Arterisk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArterisk()
   * @generated
   * @ordered
   */
  protected static final String ARTERISK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArterisk() <em>Arterisk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArterisk()
   * @generated
   * @ordered
   */
  protected String arterisk = ARTERISK_EDEFAULT;

  /**
   * The cached value of the '{@link #getSelections() <em>Selections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelections()
   * @generated
   * @ordered
   */
  protected EList<SelectionItem> selections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return D3qlPackage.Literals.SELECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getArterisk()
  {
    return arterisk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArterisk(String newArterisk)
  {
    String oldArterisk = arterisk;
    arterisk = newArterisk;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, D3qlPackage.SELECT_STATEMENT__ARTERISK, oldArterisk, arterisk));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SelectionItem> getSelections()
  {
    if (selections == null)
    {
      selections = new EObjectContainmentEList<SelectionItem>(SelectionItem.class, this, D3qlPackage.SELECT_STATEMENT__SELECTIONS);
    }
    return selections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case D3qlPackage.SELECT_STATEMENT__SELECTIONS:
        return ((InternalEList<?>)getSelections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case D3qlPackage.SELECT_STATEMENT__ARTERISK:
        return getArterisk();
      case D3qlPackage.SELECT_STATEMENT__SELECTIONS:
        return getSelections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case D3qlPackage.SELECT_STATEMENT__ARTERISK:
        setArterisk((String)newValue);
        return;
      case D3qlPackage.SELECT_STATEMENT__SELECTIONS:
        getSelections().clear();
        getSelections().addAll((Collection<? extends SelectionItem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case D3qlPackage.SELECT_STATEMENT__ARTERISK:
        setArterisk(ARTERISK_EDEFAULT);
        return;
      case D3qlPackage.SELECT_STATEMENT__SELECTIONS:
        getSelections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case D3qlPackage.SELECT_STATEMENT__ARTERISK:
        return ARTERISK_EDEFAULT == null ? arterisk != null : !ARTERISK_EDEFAULT.equals(arterisk);
      case D3qlPackage.SELECT_STATEMENT__SELECTIONS:
        return selections != null && !selections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (arterisk: ");
    result.append(arterisk);
    result.append(')');
    return result.toString();
  }

} //SelectStatementImpl
