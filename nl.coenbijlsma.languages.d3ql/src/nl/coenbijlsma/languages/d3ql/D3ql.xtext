grammar nl.coenbijlsma.languages.d3ql.D3ql with org.eclipse.xtext.common.Terminals

generate d3ql "http://www.coenbijlsma.nl/languages/d3ql/D3ql"

Query:
	from=FromStatement select=SelectStatement (where=WhereStatement)?
;

FromStatement:
	'from' aggregates+=AggregateRoot (',' aggregates+=AggregateRoot)*
;

SelectStatement:
	'select' ((arterisk='*') | (selections+=SelectionItem (',' selections+=SelectionItem)*))
;

SelectionItem:
	expression=(FQN | FunctionCall) ('as' alias=Alias)?
;

WhereStatement:
	'where' expressions+=Expression
;

Named:
	AggregateRoot | Alias
;

AggregateRoot:
	name=ID ('as' alias=Alias)?
;

Alias:
	name=ID
;

Expression:
	Or ({Expression.left=current} 'as' alias=Alias)?
;

Or returns Expression:
	And ({Or.left=current} 'or' right=And)*
;

And returns Expression:
	Equality ({And.left=current} 'and' right=Equality)*
;

Equality returns Expression:
	Comparison ({Equality.left=current} op=('='|'!=') right=Comparison)*
;

Comparison returns Expression:
	Primary (({Comparison.left=current} op=('>='|'<='|'>'|'<'|'like') right=Primary)
		| ({Comparison.left=current} op='between' x=Primary 'and' y=Primary)
		| ({Comparison.left=current} op='in' '(' list+=Atomic (',' list+=Atomic)* ')')
	)*
;

Primary returns Expression:
	'(' Expression ')' |
	{Not} '!' expression=Primary |
	FQN |
	FunctionCall |
	Atomic
;

TemplatedValue returns Expression:
	{TemplatedValue} '{' value=ID '}'
;

FQN returns Expression:
	head=[Named] '.' tail+=ID ('.' tail+=ID)*
;

FunctionCall returns Expression:
	function=ID '(' (arguments+=FunctionArgument (',' arguments+=FunctionArgument)*)? ')'
;

FunctionArgument:
	{FunctionArgument} ((reference=[Named]) | (fqn=FQN))
;

Atomic returns Expression:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BooleanConstant} value=('true'|'false') |
	{NullConstant} value='null' |
	{TemplatedValue} '{' value=ID '}' |
	{Reference} value=[Named]
;