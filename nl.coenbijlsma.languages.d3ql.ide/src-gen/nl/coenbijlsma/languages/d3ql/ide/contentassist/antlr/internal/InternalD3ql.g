/*
 * generated by Xtext 2.9.2
 */
grammar InternalD3ql;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.coenbijlsma.languages.d3ql.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.coenbijlsma.languages.d3ql.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.coenbijlsma.languages.d3ql.services.D3qlGrammarAccess;

}
@parser::members {
	private D3qlGrammarAccess grammarAccess;

	public void setGrammarAccess(D3qlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleQuery
entryRuleQuery
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQueryAccess().getGroup()); }
		(rule__Query__Group__0)
		{ after(grammarAccess.getQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFromStatement
entryRuleFromStatement
:
{ before(grammarAccess.getFromStatementRule()); }
	 ruleFromStatement
{ after(grammarAccess.getFromStatementRule()); } 
	 EOF 
;

// Rule FromStatement
ruleFromStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromStatementAccess().getGroup()); }
		(rule__FromStatement__Group__0)
		{ after(grammarAccess.getFromStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAggregateRoot
entryRuleAggregateRoot
:
{ before(grammarAccess.getAggregateRootRule()); }
	 ruleAggregateRoot
{ after(grammarAccess.getAggregateRootRule()); } 
	 EOF 
;

// Rule AggregateRoot
ruleAggregateRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAggregateRootAccess().getGroup()); }
		(rule__AggregateRoot__Group__0)
		{ after(grammarAccess.getAggregateRootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlias
entryRuleAlias
:
{ before(grammarAccess.getAliasRule()); }
	 ruleAlias
{ after(grammarAccess.getAliasRule()); } 
	 EOF 
;

// Rule Alias
ruleAlias 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAliasAccess().getNameAssignment()); }
		(rule__Alias__NameAssignment)
		{ after(grammarAccess.getAliasAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
		(rule__SelectStatement__Group__0)
		{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectExpression
entryRuleSelectExpression
:
{ before(grammarAccess.getSelectExpressionRule()); }
	 ruleSelectExpression
{ after(grammarAccess.getSelectExpressionRule()); } 
	 EOF 
;

// Rule SelectExpression
ruleSelectExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectExpressionAccess().getGroup()); }
		(rule__SelectExpression__Group__0)
		{ after(grammarAccess.getSelectExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePathExpression
entryRulePathExpression
:
{ before(grammarAccess.getPathExpressionRule()); }
	 rulePathExpression
{ after(grammarAccess.getPathExpressionRule()); } 
	 EOF 
;

// Rule PathExpression
rulePathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathExpressionAccess().getGroup()); }
		(rule__PathExpression__Group__0)
		{ after(grammarAccess.getPathExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePathElement
entryRulePathElement
:
{ before(grammarAccess.getPathElementRule()); }
	 rulePathElement
{ after(grammarAccess.getPathElementRule()); } 
	 EOF 
;

// Rule PathElement
rulePathElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathElementAccess().getNameAssignment()); }
		(rule__PathElement__NameAssignment)
		{ after(grammarAccess.getPathElementAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionArgument
entryRuleFunctionArgument
:
{ before(grammarAccess.getFunctionArgumentRule()); }
	 ruleFunctionArgument
{ after(grammarAccess.getFunctionArgumentRule()); } 
	 EOF 
;

// Rule FunctionArgument
ruleFunctionArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getValueAssignment()); }
		(rule__FunctionArgument__ValueAssignment)
		{ after(grammarAccess.getFunctionArgumentAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
		(rule__IntegerLiteral__ValueAssignment)
		{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
		(rule__BooleanLiteral__ValueAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__ExpressionAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectExpressionAccess().getExpressionPathExpressionParserRuleCall_0_0_0()); }
		rulePathExpression
		{ after(grammarAccess.getSelectExpressionAccess().getExpressionPathExpressionParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectExpressionAccess().getExpressionFunctionCallParserRuleCall_0_0_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getSelectExpressionAccess().getExpressionFunctionCallParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSelectExpressionAccess().getExpressionLiteralParserRuleCall_0_0_2()); }
		ruleLiteral
		{ after(grammarAccess.getSelectExpressionAccess().getExpressionLiteralParserRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getValuePathExpressionParserRuleCall_0_0()); }
		rulePathExpression
		{ after(grammarAccess.getFunctionArgumentAccess().getValuePathExpressionParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getValueLiteralParserRuleCall_0_1()); }
		ruleLiteral
		{ after(grammarAccess.getFunctionArgumentAccess().getValueLiteralParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
		ruleIntegerLiteral
		{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }
		'true'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }
		'false'
		{ after(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getFromStatementAssignment_0()); }
	(rule__Query__FromStatementAssignment_0)
	{ after(grammarAccess.getQueryAccess().getFromStatementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Query__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQueryAccess().getSelectStatementAssignment_1()); }
	(rule__Query__SelectStatementAssignment_1)
	{ after(grammarAccess.getQueryAccess().getSelectStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromStatement__Group__0__Impl
	rule__FromStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromStatementAccess().getFromKeyword_0()); }
	'from'
	{ after(grammarAccess.getFromStatementAccess().getFromKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromStatement__Group__1__Impl
	rule__FromStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromStatementAccess().getAggregatesAssignment_1()); }
	(rule__FromStatement__AggregatesAssignment_1)
	{ after(grammarAccess.getFromStatementAccess().getAggregatesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromStatementAccess().getGroup_2()); }
	(rule__FromStatement__Group_2__0)*
	{ after(grammarAccess.getFromStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromStatement__Group_2__0__Impl
	rule__FromStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getFromStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromStatementAccess().getAggregatesAssignment_2_1()); }
	(rule__FromStatement__AggregatesAssignment_2_1)
	{ after(grammarAccess.getFromStatementAccess().getAggregatesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AggregateRoot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregateRoot__Group__0__Impl
	rule__AggregateRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregateRootAccess().getNameAssignment_0()); }
	(rule__AggregateRoot__NameAssignment_0)
	{ after(grammarAccess.getAggregateRootAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregateRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregateRootAccess().getGroup_1()); }
	(rule__AggregateRoot__Group_1__0)?
	{ after(grammarAccess.getAggregateRootAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AggregateRoot__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregateRoot__Group_1__0__Impl
	rule__AggregateRoot__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregateRootAccess().getAsKeyword_1_0()); }
	'as'
	{ after(grammarAccess.getAggregateRootAccess().getAsKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregateRoot__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregateRootAccess().getAliasAssignment_1_1()); }
	(rule__AggregateRoot__AliasAssignment_1_1)
	{ after(grammarAccess.getAggregateRootAccess().getAliasAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSelectKeyword_0()); }
	'select'
	{ after(grammarAccess.getSelectStatementAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getExpressionsAssignment_1()); }
	(rule__SelectStatement__ExpressionsAssignment_1)
	{ after(grammarAccess.getSelectStatementAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getGroup_2()); }
	(rule__SelectStatement__Group_2__0)*
	{ after(grammarAccess.getSelectStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_2__0__Impl
	rule__SelectStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSelectStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getExpressionsAssignment_2_1()); }
	(rule__SelectStatement__ExpressionsAssignment_2_1)
	{ after(grammarAccess.getSelectStatementAccess().getExpressionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectExpression__Group__0__Impl
	rule__SelectExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectExpressionAccess().getExpressionAssignment_0()); }
	(rule__SelectExpression__ExpressionAssignment_0)
	{ after(grammarAccess.getSelectExpressionAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectExpressionAccess().getGroup_1()); }
	(rule__SelectExpression__Group_1__0)?
	{ after(grammarAccess.getSelectExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectExpression__Group_1__0__Impl
	rule__SelectExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectExpressionAccess().getAsKeyword_1_0()); }
	'as'
	{ after(grammarAccess.getSelectExpressionAccess().getAsKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectExpressionAccess().getAliasAssignment_1_1()); }
	(rule__SelectExpression__AliasAssignment_1_1)
	{ after(grammarAccess.getSelectExpressionAccess().getAliasAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group__0__Impl
	rule__PathExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getHeadAssignment_0()); }
	(rule__PathExpression__HeadAssignment_0)
	{ after(grammarAccess.getPathExpressionAccess().getHeadAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getGroup_1()); }
	(rule__PathExpression__Group_1__0)?
	{ after(grammarAccess.getPathExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group_1__0__Impl
	rule__PathExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group_1__1__Impl
	rule__PathExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getGroup_1_1()); }
	(rule__PathExpression__Group_1_1__0)*
	{ after(grammarAccess.getPathExpressionAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getTailAssignment_1_2()); }
	(rule__PathExpression__TailAssignment_1_2)
	{ after(grammarAccess.getPathExpressionAccess().getTailAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group_1_1__0__Impl
	rule__PathExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getTailAssignment_1_1_0()); }
	(rule__PathExpression__TailAssignment_1_1_0)
	{ after(grammarAccess.getPathExpressionAccess().getTailAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_1_1()); }
	'.'
	{ after(grammarAccess.getPathExpressionAccess().getFullStopKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
	(rule__FunctionCall__FunctionAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2()); }
	(rule__FunctionCall__ArgumentsAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_1()); }
	(rule__FunctionCall__ArgumentsAssignment_3_1)
	{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Query__FromStatementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getFromStatementFromStatementParserRuleCall_0_0()); }
		ruleFromStatement
		{ after(grammarAccess.getQueryAccess().getFromStatementFromStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__SelectStatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQueryAccess().getSelectStatementSelectStatementParserRuleCall_1_0()); }
		ruleSelectStatement
		{ after(grammarAccess.getQueryAccess().getSelectStatementSelectStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__AggregatesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_1_0()); }
		ruleAggregateRoot
		{ after(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromStatement__AggregatesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_2_1_0()); }
		ruleAggregateRoot
		{ after(grammarAccess.getFromStatementAccess().getAggregatesAggregateRootParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregateRootAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAggregateRootAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregateRoot__AliasAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregateRootAccess().getAliasAliasParserRuleCall_1_1_0()); }
		ruleAlias
		{ after(grammarAccess.getAggregateRootAccess().getAliasAliasParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alias__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_1_0()); }
		ruleSelectExpression
		{ after(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__ExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_2_1_0()); }
		ruleSelectExpression
		{ after(grammarAccess.getSelectStatementAccess().getExpressionsSelectExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectExpressionAccess().getExpressionAlternatives_0_0()); }
		(rule__SelectExpression__ExpressionAlternatives_0_0)
		{ after(grammarAccess.getSelectExpressionAccess().getExpressionAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectExpression__AliasAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectExpressionAccess().getAliasAliasParserRuleCall_1_1_0()); }
		ruleAlias
		{ after(grammarAccess.getSelectExpressionAccess().getAliasAliasParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__HeadAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathExpressionAccess().getHeadNamedCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPathExpressionAccess().getHeadNamedIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPathExpressionAccess().getHeadNamedIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPathExpressionAccess().getHeadNamedCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__TailAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_1_0_0()); }
		rulePathElement
		{ after(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpression__TailAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_2_0()); }
		rulePathElement
		{ after(grammarAccess.getPathExpressionAccess().getTailPathElementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathElement__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathElementAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getPathElementAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFunctionIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionCallAccess().getFunctionIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_2_0()); }
		ruleFunctionArgument
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_3_1_0()); }
		ruleFunctionArgument
		{ after(grammarAccess.getFunctionCallAccess().getArgumentsFunctionArgumentParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getValueAlternatives_0()); }
		(rule__FunctionArgument__ValueAlternatives_0)
		{ after(grammarAccess.getFunctionArgumentAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
		(rule__BooleanLiteral__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
